// bslfmt_format_args_cpp03.h                                         -*-C++-*-

// Automatically generated file.  **DO NOT EDIT**

#ifndef INCLUDED_BSLFMT_FORMAT_ARGS_CPP03
#define INCLUDED_BSLFMT_FORMAT_ARGS_CPP03

//@PURPOSE: Provide C++03 implementation for bslfmt_format_args.h
//
//@CLASSES: See bslfmt_format_args.h for list of classes
//
//@SEE_ALSO: bslfmt_format_args
//
//@DESCRIPTION:  This component is the C++03 translation of a C++11 component,
// generated by the 'sim_cpp11_features.pl' program.  If the original header
// contains any specially delimited regions of C++11 code, then this generated
// file contains the C++03 equivalent, i.e., with variadic templates expanded
// and rvalue-references replaced by 'bslmf::MovableRef' objects.  The header
// code in this file is designed to be '#include'd into the original header
// when compiling with a C++03 compiler.  If there are no specially delimited
// regions of C++11 code, then this header contains no code and is not
// '#include'd in the original header.
//
// Generated on Wed Apr  9 07:21:55 2025
// Command line: sim_cpp11_features.pl bslfmt_format_args.h

#ifdef COMPILING_BSLFMT_FORMAT_ARGS_H

namespace BloombergLP {
namespace bslfmt {

// FORWARD DECLARATIONS

template <class t_OUT, class t_CHAR>
class basic_format_context;

template <class t_CONTEXT>
class basic_format_args;

template <class t_VALUE>
class Format_ContextOutputIteratorRef;

// TYPEDEFS

typedef basic_format_context<Format_ContextOutputIteratorRef<char>, char>
    format_context;

typedef basic_format_context<Format_ContextOutputIteratorRef<wchar_t>, wchar_t>
    wformat_context;

typedef basic_format_args<format_context> format_args;

typedef basic_format_args<wformat_context> wformat_args;

                        // ======================
                        // class Format_ArgsStore
                        // ======================

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_format_args.h
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#endif
template <class t_CONTEXT
#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 0
        , class t_ARGS_0 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 1
        , class t_ARGS_1 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 2
        , class t_ARGS_2 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 3
        , class t_ARGS_3 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 4
        , class t_ARGS_4 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 5
        , class t_ARGS_5 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 6
        , class t_ARGS_6 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 7
        , class t_ARGS_7 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 8
        , class t_ARGS_8 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 9
        , class t_ARGS_9 = BSLS_COMPILERFEATURES_NILT
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 9
        , class = BSLS_COMPILERFEATURES_NILT>
class Format_ArgsStore;

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 0
template <class t_CONTEXT>
class Format_ArgsStore<t_CONTEXT> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  0u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  0u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  0u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 1
template <class t_CONTEXT, class t_ARGS_01>
class Format_ArgsStore<t_CONTEXT, t_ARGS_01> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  1u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  1u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  1u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 2
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02>
class Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                  t_ARGS_02> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  2u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  2u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  2u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 3
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03>
class Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  3u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  3u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  3u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 4
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04>
class Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  4u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  4u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  4u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 5
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05>
class Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  5u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  5u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  5u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 6
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06>
class Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  6u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  6u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  6u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 7
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07>
class Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  7u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  7u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  7u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 8
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08>
class Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07,
                                  t_ARGS_08> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  8u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  8u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  8u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 9
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09>
class Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07,
                                  t_ARGS_08,
                                  t_ARGS_09> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>,  9u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  9u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  9u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 10
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09,
                           class t_ARGS_10>
class Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07,
                                  t_ARGS_08,
                                  t_ARGS_09,
                                  t_ARGS_10> {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>, 10u> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>, 10u>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>, 10u> > args)
        BSLS_KEYWORD_NOEXCEPT;
};
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_A >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
template <class t_CONTEXT, class... t_ARGS>
class Format_ArgsStore {

  private:
    bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)> d_args;

    template <class t_INNER_CONTEXT>
    friend class basic_format_args;

    friend class Format_ArgsUtil;


    explicit Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)>& args)
        BSLS_KEYWORD_NOEXCEPT;

    explicit Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)> > args)
        BSLS_KEYWORD_NOEXCEPT;
};

// }}} END GENERATED CODE
#endif

// FREE FUNCTIONS

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_format_args.h
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#endif
#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 0
Format_ArgsStore<format_context> make_format_args(
                                                          );
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 1
template <class t_ARGS_01>
Format_ArgsStore<format_context, t_ARGS_01> make_format_args(
                                                       t_ARGS_01& fmt_args_01);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09,
                                 t_ARGS_10> make_format_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09,
                                                       t_ARGS_10& fmt_args_10);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 10


#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 0
Format_ArgsStore<wformat_context> make_wformat_args(
                                                          );
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 1
template <class t_ARGS_01>
Format_ArgsStore<wformat_context, t_ARGS_01> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07,
                                  t_ARGS_08> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07,
                                  t_ARGS_08,
                                  t_ARGS_09> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07,
                                  t_ARGS_08,
                                  t_ARGS_09,
                                  t_ARGS_10> make_wformat_args(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09,
                                                       t_ARGS_10& fmt_args_10);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_B >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
template <class... t_ARGS>
Format_ArgsStore<format_context, t_ARGS...> make_format_args(
                                                          t_ARGS&... fmt_args);

template <class... t_ARGS>
Format_ArgsStore<wformat_context, t_ARGS...> make_wformat_args(
                                                          t_ARGS&... fmt_args);
// }}} END GENERATED CODE
#endif


                         // =======================
                         // class basic_format_args
                         // =======================

/// A class intended to provide access to formatting arguments.  This should
/// not be constructed directly but indirectly using one of the
/// `make_format_args` or the `make_wformat_args` functions.  Note that this
/// type has reference semantics and users must ensure that this type does not
/// outlive the arguments used in its construction.
template <class t_CONTEXT>
class basic_format_args {
  private:
    // DATA
    size_t                             d_size;    // number of arguments held

    const basic_format_arg<t_CONTEXT> *d_data_p;  // pointer to the first
                                                  // element of the contained
                                                  // array.

    // PRIVATE ACCESSORS

    /// Return the number of arguments contained within this object.
    size_t size() const;

    // FRIENDS
    friend class Format_ArgsUtil;

  public:
    // CREATORS

    /// Create a `basic_format_args` object which contains no arguments.
    basic_format_args() BSLS_KEYWORD_NOEXCEPT;

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_format_args.h
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#endif
#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 0
    basic_format_args(const Format_ArgsStore<t_CONTEXT>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 1
    template <class t_ARGS_01>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS_01>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 2
    template <class t_ARGS_01,
              class t_ARGS_02>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 3
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 4
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 5
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 6
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05,
                                                        t_ARGS_06>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 7
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05,
                                                        t_ARGS_06,
                                                        t_ARGS_07>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 8
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07,
              class t_ARGS_08>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05,
                                                        t_ARGS_06,
                                                        t_ARGS_07,
                                                        t_ARGS_08>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 9
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07,
              class t_ARGS_08,
              class t_ARGS_09>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05,
                                                        t_ARGS_06,
                                                        t_ARGS_07,
                                                        t_ARGS_08,
                                                        t_ARGS_09>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 10
    template <class t_ARGS_01,
              class t_ARGS_02,
              class t_ARGS_03,
              class t_ARGS_04,
              class t_ARGS_05,
              class t_ARGS_06,
              class t_ARGS_07,
              class t_ARGS_08,
              class t_ARGS_09,
              class t_ARGS_10>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05,
                                                        t_ARGS_06,
                                                        t_ARGS_07,
                                                        t_ARGS_08,
                                                        t_ARGS_09,
                                                        t_ARGS_10>& store)
        BSLS_KEYWORD_NOEXCEPT;
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_C >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
    template <class... t_ARGS>
    basic_format_args(const Format_ArgsStore<t_CONTEXT, t_ARGS...>& store)
        BSLS_KEYWORD_NOEXCEPT;
// }}} END GENERATED CODE
#endif

    // ACCESSORS

    /// Return the argument held at the position given by the specified `pos`.
    /// If `pos >= size()` then a default-constructed `basic_format_arg` is
    /// returned.
    basic_format_arg<t_CONTEXT> get(size_t pos) const BSLS_KEYWORD_NOEXCEPT;
};

                           // ---------------------
                           // class Format_ArgsUtil
                           // ---------------------

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_format_args.h
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#endif

class Format_ArgsUtil {
  public:

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 0
    template <class t_CONTEXT>
    static Format_ArgsStore<t_CONTEXT> makeFormatArgs(
                                                          );
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 1
    template <class t_CONTEXT, class t_ARGS_01>
    static Format_ArgsStore<t_CONTEXT, t_ARGS_01> makeFormatArgs(
                                                       t_ARGS_01& fmt_args_01);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 2
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02>
    static Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02> makeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 3
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03>
    static Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03> makeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 4
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04>
    static Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04> makeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 5
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05>
    static Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05> makeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 6
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05,
                               class t_ARGS_06>
    static Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06> makeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 7
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05,
                               class t_ARGS_06,
                               class t_ARGS_07>
    static Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07> makeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 8
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05,
                               class t_ARGS_06,
                               class t_ARGS_07,
                               class t_ARGS_08>
    static Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08> makeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 9
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05,
                               class t_ARGS_06,
                               class t_ARGS_07,
                               class t_ARGS_08,
                               class t_ARGS_09>
    static Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09> makeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 10
    template <class t_CONTEXT, class t_ARGS_01,
                               class t_ARGS_02,
                               class t_ARGS_03,
                               class t_ARGS_04,
                               class t_ARGS_05,
                               class t_ARGS_06,
                               class t_ARGS_07,
                               class t_ARGS_08,
                               class t_ARGS_09,
                               class t_ARGS_10>
    static Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09,
                                       t_ARGS_10> makeFormatArgs(
                                                       t_ARGS_01& fmt_args_01,
                                                       t_ARGS_02& fmt_args_02,
                                                       t_ARGS_03& fmt_args_03,
                                                       t_ARGS_04& fmt_args_04,
                                                       t_ARGS_05& fmt_args_05,
                                                       t_ARGS_06& fmt_args_06,
                                                       t_ARGS_07& fmt_args_07,
                                                       t_ARGS_08& fmt_args_08,
                                                       t_ARGS_09& fmt_args_09,
                                                       t_ARGS_10& fmt_args_10);
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_D >= 10


    template <class t_CONTEXT>
    static size_t formatArgsSize(const basic_format_args<t_CONTEXT>& args);
};
#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.

class Format_ArgsUtil {
  public:

    template <class t_CONTEXT, class... t_ARGS>
    static Format_ArgsStore<t_CONTEXT, t_ARGS...> makeFormatArgs(
                                                          t_ARGS&... fmt_args);

    template <class t_CONTEXT>
    static size_t formatArgsSize(const basic_format_args<t_CONTEXT>& args);
};

// }}} END GENERATED CODE
#endif

// ============================================================================
//                           INLINE DEFINITIONS
// ============================================================================

                   // -------------------------------------
                   // class Format_ArgsStore<t_OUT, T_CHAR>
                   // -------------------------------------

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_format_args.h
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#endif

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 0
template <class t_CONTEXT>
inline
Format_ArgsStore<t_CONTEXT, BSLS_COMPILERFEATURES_FILLT(10)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  0u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 1
template <class t_CONTEXT, class t_ARGS_01>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            BSLS_COMPILERFEATURES_FILLT( 9)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  1u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 2
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            BSLS_COMPILERFEATURES_FILLT( 8)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  2u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 3
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            BSLS_COMPILERFEATURES_FILLT( 7)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  3u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 4
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            BSLS_COMPILERFEATURES_FILLT( 6)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  4u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 5
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            BSLS_COMPILERFEATURES_FILLT( 5)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  5u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 6
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            BSLS_COMPILERFEATURES_FILLT( 4)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  6u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 7
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            BSLS_COMPILERFEATURES_FILLT( 3)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  7u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 8
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            t_ARGS_08,
                            BSLS_COMPILERFEATURES_FILLT( 2)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  8u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 9
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            t_ARGS_08,
                            t_ARGS_09,
                            BSLS_COMPILERFEATURES_FILLT( 1)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>,  9u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 10
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09,
                           class t_ARGS_10>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            t_ARGS_08,
                            t_ARGS_09,
                            t_ARGS_10,
                            BSLS_COMPILERFEATURES_FILLT( 0)>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>, 10u>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 10


#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 0
template <class t_CONTEXT>
inline
Format_ArgsStore<t_CONTEXT, BSLS_COMPILERFEATURES_FILLT(10)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  0u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 1
template <class t_CONTEXT, class t_ARGS_01>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            BSLS_COMPILERFEATURES_FILLT( 9)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  1u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 2
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            BSLS_COMPILERFEATURES_FILLT( 8)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  2u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 3
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            BSLS_COMPILERFEATURES_FILLT( 7)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  3u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 4
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            BSLS_COMPILERFEATURES_FILLT( 6)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  4u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 5
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            BSLS_COMPILERFEATURES_FILLT( 5)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  5u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 6
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            BSLS_COMPILERFEATURES_FILLT( 4)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  6u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 7
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            BSLS_COMPILERFEATURES_FILLT( 3)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  7u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 8
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            t_ARGS_08,
                            BSLS_COMPILERFEATURES_FILLT( 2)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  8u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 9
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            t_ARGS_08,
                            t_ARGS_09,
                            BSLS_COMPILERFEATURES_FILLT( 1)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>,  9u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 10
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09,
                           class t_ARGS_10>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            t_ARGS_08,
                            t_ARGS_09,
                            t_ARGS_10,
                            BSLS_COMPILERFEATURES_FILLT( 0)>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>, 10u> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_E >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.

template <class t_CONTEXT, class... t_ARGS>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS...>::Format_ArgsStore(
        const bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)>& args)
    BSLS_KEYWORD_NOEXCEPT : d_args(args)
{
}

template <class t_CONTEXT, class... t_ARGS>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS...>::Format_ArgsStore(
         bslmf::MovableRef<
             bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)> > args)
    BSLS_KEYWORD_NOEXCEPT : d_args(bslmf::MovableRefUtil::move(args))
{
}

// }}} END GENERATED CODE
#endif

                     // ----------------------------------
                     // class basic_format_args<t_CONTEXT>
                     // ----------------------------------

// CREATORS
template <class t_CONTEXT>
inline
basic_format_args<t_CONTEXT>::basic_format_args() BSLS_KEYWORD_NOEXCEPT
: d_size(0)
, d_data_p(0)
{}

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_format_args.h
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#endif
#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 0
template <class t_CONTEXT>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 0u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 1
template <class t_CONTEXT>
template <class t_ARGS_01>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS_01>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 1u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 2
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 2u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 3
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 3u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 4
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 4u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 5
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 5u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 6
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05,
                                                        t_ARGS_06>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 6u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 7
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05,
                                                        t_ARGS_06,
                                                        t_ARGS_07>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 7u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 8
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05,
                                                        t_ARGS_06,
                                                        t_ARGS_07,
                                                        t_ARGS_08>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 8u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 9
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05,
                                                        t_ARGS_06,
                                                        t_ARGS_07,
                                                        t_ARGS_08,
                                                        t_ARGS_09>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size( 9u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 10
template <class t_CONTEXT>
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                                        t_ARGS_02,
                                                        t_ARGS_03,
                                                        t_ARGS_04,
                                                        t_ARGS_05,
                                                        t_ARGS_06,
                                                        t_ARGS_07,
                                                        t_ARGS_08,
                                                        t_ARGS_09,
                                                        t_ARGS_10>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size(10u)
, d_data_p(store.d_args.data())
{
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_F >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.
template <class t_CONTEXT>
template <class... t_ARGS>
inline
basic_format_args<t_CONTEXT>::basic_format_args(
                      const Format_ArgsStore<t_CONTEXT, t_ARGS...>& store)
    BSLS_KEYWORD_NOEXCEPT
: d_size(sizeof...(t_ARGS))
, d_data_p(store.d_args.data())
{
}
// }}} END GENERATED CODE
#endif

// ACCESSORS
template <class t_CONTEXT>
inline
basic_format_arg<t_CONTEXT> basic_format_args<t_CONTEXT>::get(
                                        size_t pos) const BSLS_KEYWORD_NOEXCEPT
{
    return pos < d_size ? d_data_p[pos] : basic_format_arg<t_CONTEXT>();
}


// PRIVATE ACCESSORS
template <class t_CONTEXT>
inline
size_t basic_format_args<t_CONTEXT>::size() const
{
    return d_size;
}


                           // ---------------------
                           // class Format_ArgsUtil
                           // ---------------------

// CLASS METHODS

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_format_args.h
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#endif

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 0
template <class t_CONTEXT>
inline
Format_ArgsStore<t_CONTEXT>
Format_ArgsUtil::makeFormatArgs()
{
    bsl::array<basic_format_arg<t_CONTEXT>,  0u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT>(&arg_array);
    return Format_ArgsStore<t_CONTEXT>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 1
template <class t_CONTEXT, class t_ARGS_01>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01>
Format_ArgsUtil::makeFormatArgs(t_ARGS_01& fmt_args_01)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  1u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS_01>(&arg_array,
                                                             fmt_args_01);
    return Format_ArgsStore<t_CONTEXT, t_ARGS_01>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 2
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02>
Format_ArgsUtil::makeFormatArgs(t_ARGS_01& fmt_args_01,
                                t_ARGS_02& fmt_args_02)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  2u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                                  t_ARGS_02>(&arg_array,
                                                             fmt_args_01,
                                                             fmt_args_02);
    return Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 3
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03>
Format_ArgsUtil::makeFormatArgs(t_ARGS_01& fmt_args_01,
                                t_ARGS_02& fmt_args_02,
                                t_ARGS_03& fmt_args_03)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  3u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                                  t_ARGS_02,
                                                  t_ARGS_03>(&arg_array,
                                                             fmt_args_01,
                                                             fmt_args_02,
                                                             fmt_args_03);
    return Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 4
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04>
Format_ArgsUtil::makeFormatArgs(t_ARGS_01& fmt_args_01,
                                t_ARGS_02& fmt_args_02,
                                t_ARGS_03& fmt_args_03,
                                t_ARGS_04& fmt_args_04)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  4u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                                  t_ARGS_02,
                                                  t_ARGS_03,
                                                  t_ARGS_04>(&arg_array,
                                                             fmt_args_01,
                                                             fmt_args_02,
                                                             fmt_args_03,
                                                             fmt_args_04);
    return Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 5
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05>
Format_ArgsUtil::makeFormatArgs(t_ARGS_01& fmt_args_01,
                                t_ARGS_02& fmt_args_02,
                                t_ARGS_03& fmt_args_03,
                                t_ARGS_04& fmt_args_04,
                                t_ARGS_05& fmt_args_05)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  5u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                                  t_ARGS_02,
                                                  t_ARGS_03,
                                                  t_ARGS_04,
                                                  t_ARGS_05>(&arg_array,
                                                             fmt_args_01,
                                                             fmt_args_02,
                                                             fmt_args_03,
                                                             fmt_args_04,
                                                             fmt_args_05);
    return Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 6
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06>
Format_ArgsUtil::makeFormatArgs(t_ARGS_01& fmt_args_01,
                                t_ARGS_02& fmt_args_02,
                                t_ARGS_03& fmt_args_03,
                                t_ARGS_04& fmt_args_04,
                                t_ARGS_05& fmt_args_05,
                                t_ARGS_06& fmt_args_06)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  6u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                                  t_ARGS_02,
                                                  t_ARGS_03,
                                                  t_ARGS_04,
                                                  t_ARGS_05,
                                                  t_ARGS_06>(&arg_array,
                                                             fmt_args_01,
                                                             fmt_args_02,
                                                             fmt_args_03,
                                                             fmt_args_04,
                                                             fmt_args_05,
                                                             fmt_args_06);
    return Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 7
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07>
Format_ArgsUtil::makeFormatArgs(t_ARGS_01& fmt_args_01,
                                t_ARGS_02& fmt_args_02,
                                t_ARGS_03& fmt_args_03,
                                t_ARGS_04& fmt_args_04,
                                t_ARGS_05& fmt_args_05,
                                t_ARGS_06& fmt_args_06,
                                t_ARGS_07& fmt_args_07)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  7u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                                  t_ARGS_02,
                                                  t_ARGS_03,
                                                  t_ARGS_04,
                                                  t_ARGS_05,
                                                  t_ARGS_06,
                                                  t_ARGS_07>(&arg_array,
                                                             fmt_args_01,
                                                             fmt_args_02,
                                                             fmt_args_03,
                                                             fmt_args_04,
                                                             fmt_args_05,
                                                             fmt_args_06,
                                                             fmt_args_07);
    return Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 8
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            t_ARGS_08>
Format_ArgsUtil::makeFormatArgs(t_ARGS_01& fmt_args_01,
                                t_ARGS_02& fmt_args_02,
                                t_ARGS_03& fmt_args_03,
                                t_ARGS_04& fmt_args_04,
                                t_ARGS_05& fmt_args_05,
                                t_ARGS_06& fmt_args_06,
                                t_ARGS_07& fmt_args_07,
                                t_ARGS_08& fmt_args_08)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  8u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                                  t_ARGS_02,
                                                  t_ARGS_03,
                                                  t_ARGS_04,
                                                  t_ARGS_05,
                                                  t_ARGS_06,
                                                  t_ARGS_07,
                                                  t_ARGS_08>(&arg_array,
                                                             fmt_args_01,
                                                             fmt_args_02,
                                                             fmt_args_03,
                                                             fmt_args_04,
                                                             fmt_args_05,
                                                             fmt_args_06,
                                                             fmt_args_07,
                                                             fmt_args_08);
    return Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 9
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            t_ARGS_08,
                            t_ARGS_09>
Format_ArgsUtil::makeFormatArgs(t_ARGS_01& fmt_args_01,
                                t_ARGS_02& fmt_args_02,
                                t_ARGS_03& fmt_args_03,
                                t_ARGS_04& fmt_args_04,
                                t_ARGS_05& fmt_args_05,
                                t_ARGS_06& fmt_args_06,
                                t_ARGS_07& fmt_args_07,
                                t_ARGS_08& fmt_args_08,
                                t_ARGS_09& fmt_args_09)
{
    bsl::array<basic_format_arg<t_CONTEXT>,  9u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                                  t_ARGS_02,
                                                  t_ARGS_03,
                                                  t_ARGS_04,
                                                  t_ARGS_05,
                                                  t_ARGS_06,
                                                  t_ARGS_07,
                                                  t_ARGS_08,
                                                  t_ARGS_09>(&arg_array,
                                                             fmt_args_01,
                                                             fmt_args_02,
                                                             fmt_args_03,
                                                             fmt_args_04,
                                                             fmt_args_05,
                                                             fmt_args_06,
                                                             fmt_args_07,
                                                             fmt_args_08,
                                                             fmt_args_09);
    return Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 10
template <class t_CONTEXT, class t_ARGS_01,
                           class t_ARGS_02,
                           class t_ARGS_03,
                           class t_ARGS_04,
                           class t_ARGS_05,
                           class t_ARGS_06,
                           class t_ARGS_07,
                           class t_ARGS_08,
                           class t_ARGS_09,
                           class t_ARGS_10>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                            t_ARGS_02,
                            t_ARGS_03,
                            t_ARGS_04,
                            t_ARGS_05,
                            t_ARGS_06,
                            t_ARGS_07,
                            t_ARGS_08,
                            t_ARGS_09,
                            t_ARGS_10>
Format_ArgsUtil::makeFormatArgs(t_ARGS_01& fmt_args_01,
                                t_ARGS_02& fmt_args_02,
                                t_ARGS_03& fmt_args_03,
                                t_ARGS_04& fmt_args_04,
                                t_ARGS_05& fmt_args_05,
                                t_ARGS_06& fmt_args_06,
                                t_ARGS_07& fmt_args_07,
                                t_ARGS_08& fmt_args_08,
                                t_ARGS_09& fmt_args_09,
                                t_ARGS_10& fmt_args_10)
{
    bsl::array<basic_format_arg<t_CONTEXT>, 10u> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS_01,
                                                  t_ARGS_02,
                                                  t_ARGS_03,
                                                  t_ARGS_04,
                                                  t_ARGS_05,
                                                  t_ARGS_06,
                                                  t_ARGS_07,
                                                  t_ARGS_08,
                                                  t_ARGS_09,
                                                  t_ARGS_10>(&arg_array,
                                                             fmt_args_01,
                                                             fmt_args_02,
                                                             fmt_args_03,
                                                             fmt_args_04,
                                                             fmt_args_05,
                                                             fmt_args_06,
                                                             fmt_args_07,
                                                             fmt_args_08,
                                                             fmt_args_09,
                                                             fmt_args_10);
    return Format_ArgsStore<t_CONTEXT, t_ARGS_01,
                                       t_ARGS_02,
                                       t_ARGS_03,
                                       t_ARGS_04,
                                       t_ARGS_05,
                                       t_ARGS_06,
                                       t_ARGS_07,
                                       t_ARGS_08,
                                       t_ARGS_09,
                                       t_ARGS_10>(
                                       bslmf::MovableRefUtil::move(arg_array));
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_G >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.

template <class t_CONTEXT, class... t_ARGS>
inline
Format_ArgsStore<t_CONTEXT, t_ARGS...>
Format_ArgsUtil::makeFormatArgs(t_ARGS&... fmt_args)
{
    bsl::array<basic_format_arg<t_CONTEXT>, sizeof...(t_ARGS)> arg_array;
    Format_ArgUtil::makeFormatArgArray<t_CONTEXT, t_ARGS...>(&arg_array,
                                                             fmt_args...);
    return Format_ArgsStore<t_CONTEXT, t_ARGS...>(
                                       bslmf::MovableRefUtil::move(arg_array));
}

// }}} END GENERATED CODE
#endif

template <class t_CONTEXT>
inline
size_t Format_ArgsUtil::formatArgsSize(
                                      const basic_format_args<t_CONTEXT>& args)
{
    return args.size();
}


                               // --------------
                               // FREE FUNCTIONS
                               // --------------

// FREE FUNCTIONS

#if BSLS_COMPILERFEATURES_SIMULATE_VARIADIC_TEMPLATES
// {{{ BEGIN GENERATED CODE
// Command line: sim_cpp11_features.pl bslfmt_format_args.h
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT 10
#endif
#ifndef BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H
#define BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT
#endif

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 0
inline
Format_ArgsStore<format_context> make_format_args(
                                                           )
{
    return Format_ArgsUtil::makeFormatArgs<format_context>();
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 1
template <class t_ARGS_01>
inline
Format_ArgsStore<format_context, t_ARGS_01> make_format_args(
                                                        t_ARGS_01& fmt_args_01)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args_01);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
inline
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args_01,
                                                           fmt_args_02);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
inline
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args_01,
                                                           fmt_args_02,
                                                           fmt_args_03);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
inline
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args_01,
                                                           fmt_args_02,
                                                           fmt_args_03,
                                                           fmt_args_04);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
inline
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args_01,
                                                           fmt_args_02,
                                                           fmt_args_03,
                                                           fmt_args_04,
                                                           fmt_args_05);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
inline
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args_01,
                                                           fmt_args_02,
                                                           fmt_args_03,
                                                           fmt_args_04,
                                                           fmt_args_05,
                                                           fmt_args_06);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
inline
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args_01,
                                                           fmt_args_02,
                                                           fmt_args_03,
                                                           fmt_args_04,
                                                           fmt_args_05,
                                                           fmt_args_06,
                                                           fmt_args_07);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
inline
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args_01,
                                                           fmt_args_02,
                                                           fmt_args_03,
                                                           fmt_args_04,
                                                           fmt_args_05,
                                                           fmt_args_06,
                                                           fmt_args_07,
                                                           fmt_args_08);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
inline
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08,
                                                        t_ARGS_09& fmt_args_09)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args_01,
                                                           fmt_args_02,
                                                           fmt_args_03,
                                                           fmt_args_04,
                                                           fmt_args_05,
                                                           fmt_args_06,
                                                           fmt_args_07,
                                                           fmt_args_08,
                                                           fmt_args_09);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
inline
Format_ArgsStore<format_context, t_ARGS_01,
                                 t_ARGS_02,
                                 t_ARGS_03,
                                 t_ARGS_04,
                                 t_ARGS_05,
                                 t_ARGS_06,
                                 t_ARGS_07,
                                 t_ARGS_08,
                                 t_ARGS_09,
                                 t_ARGS_10> make_format_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08,
                                                        t_ARGS_09& fmt_args_09,
                                                        t_ARGS_10& fmt_args_10)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args_01,
                                                           fmt_args_02,
                                                           fmt_args_03,
                                                           fmt_args_04,
                                                           fmt_args_05,
                                                           fmt_args_06,
                                                           fmt_args_07,
                                                           fmt_args_08,
                                                           fmt_args_09,
                                                           fmt_args_10);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 10


#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 0
inline
Format_ArgsStore<wformat_context> make_wformat_args(
                                                           )
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>();
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 0

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 1
template <class t_ARGS_01>
inline
Format_ArgsStore<wformat_context, t_ARGS_01> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args_01);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 1

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 2
template <class t_ARGS_01,
          class t_ARGS_02>
inline
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args_01,
                                                            fmt_args_02);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 2

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 3
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03>
inline
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args_01,
                                                            fmt_args_02,
                                                            fmt_args_03);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 3

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 4
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04>
inline
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args_01,
                                                            fmt_args_02,
                                                            fmt_args_03,
                                                            fmt_args_04);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 4

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 5
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05>
inline
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args_01,
                                                            fmt_args_02,
                                                            fmt_args_03,
                                                            fmt_args_04,
                                                            fmt_args_05);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 5

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 6
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06>
inline
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args_01,
                                                            fmt_args_02,
                                                            fmt_args_03,
                                                            fmt_args_04,
                                                            fmt_args_05,
                                                            fmt_args_06);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 6

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 7
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07>
inline
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args_01,
                                                            fmt_args_02,
                                                            fmt_args_03,
                                                            fmt_args_04,
                                                            fmt_args_05,
                                                            fmt_args_06,
                                                            fmt_args_07);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 7

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 8
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08>
inline
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07,
                                  t_ARGS_08> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args_01,
                                                            fmt_args_02,
                                                            fmt_args_03,
                                                            fmt_args_04,
                                                            fmt_args_05,
                                                            fmt_args_06,
                                                            fmt_args_07,
                                                            fmt_args_08);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 8

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 9
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09>
inline
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07,
                                  t_ARGS_08,
                                  t_ARGS_09> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08,
                                                        t_ARGS_09& fmt_args_09)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args_01,
                                                            fmt_args_02,
                                                            fmt_args_03,
                                                            fmt_args_04,
                                                            fmt_args_05,
                                                            fmt_args_06,
                                                            fmt_args_07,
                                                            fmt_args_08,
                                                            fmt_args_09);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 9

#if BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 10
template <class t_ARGS_01,
          class t_ARGS_02,
          class t_ARGS_03,
          class t_ARGS_04,
          class t_ARGS_05,
          class t_ARGS_06,
          class t_ARGS_07,
          class t_ARGS_08,
          class t_ARGS_09,
          class t_ARGS_10>
inline
Format_ArgsStore<wformat_context, t_ARGS_01,
                                  t_ARGS_02,
                                  t_ARGS_03,
                                  t_ARGS_04,
                                  t_ARGS_05,
                                  t_ARGS_06,
                                  t_ARGS_07,
                                  t_ARGS_08,
                                  t_ARGS_09,
                                  t_ARGS_10> make_wformat_args(
                                                        t_ARGS_01& fmt_args_01,
                                                        t_ARGS_02& fmt_args_02,
                                                        t_ARGS_03& fmt_args_03,
                                                        t_ARGS_04& fmt_args_04,
                                                        t_ARGS_05& fmt_args_05,
                                                        t_ARGS_06& fmt_args_06,
                                                        t_ARGS_07& fmt_args_07,
                                                        t_ARGS_08& fmt_args_08,
                                                        t_ARGS_09& fmt_args_09,
                                                        t_ARGS_10& fmt_args_10)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args_01,
                                                            fmt_args_02,
                                                            fmt_args_03,
                                                            fmt_args_04,
                                                            fmt_args_05,
                                                            fmt_args_06,
                                                            fmt_args_07,
                                                            fmt_args_08,
                                                            fmt_args_09,
                                                            fmt_args_10);
}
#endif  // BSLFMT_FORMAT_ARGS_VARIADIC_LIMIT_H >= 10

#else
// The generated code below is a workaround for the absence of perfect
// forwarding in some compilers.

template <class... t_ARGS>
inline
Format_ArgsStore<format_context, t_ARGS...> make_format_args(
                                                           t_ARGS&... fmt_args)
{
    return Format_ArgsUtil::makeFormatArgs<format_context>(fmt_args...);
}

template <class... t_ARGS>
inline
Format_ArgsStore<wformat_context, t_ARGS...> make_wformat_args(
                                                           t_ARGS&... fmt_args)
{
    return Format_ArgsUtil::makeFormatArgs<wformat_context>(fmt_args...);
}

// }}} END GENERATED CODE
#endif

}  // close package namespace
}  // close enterprise namespace

#else // if ! defined(DEFINED_BSLFMT_FORMAT_ARGS_H)
# error Not valid except when included from bslfmt_format_args.h
#endif // ! defined(COMPILING_BSLFMT_FORMAT_ARGS_H)

#endif // ! defined(INCLUDED_BSLFMT_FORMAT_ARGS_CPP03)

// ----------------------------------------------------------------------------
// Copyright 2023 Bloomberg Finance L.P.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------- END-OF-FILE ----------------------------------
